// <auto-generated />
using System;
using ChildrenVaccinationSystem.Repositories.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChildrenVaccinationSystem.Repositories.Migrations
{
    [DbContext(typeof(ChildrenVaccinationSystemDbContext))]
    [Migration("20250128161221_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Child", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChildCode")
                        .IsUnique();

                    b.ToTable("Children");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Facility", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VaccineId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ImageSource")
                        .IsUnique();

                    b.HasIndex("VaccineId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Manufacturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Package", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.PackageItem", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VaccineId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PackageId", "VaccineId");

                    b.HasIndex("VaccineId");

                    b.ToTable("PackageItems");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccination", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Schedule")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("VaccinatorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("VaccinatorId");

                    b.ToTable("Vaccinations");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.VaccinationDetail", b =>
                {
                    b.Property<string>("PackageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VaccinationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VaccineId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PackageId", "VaccinationId", "VaccineId");

                    b.HasIndex("VaccinationId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccinationDetails");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DosageInterval")
                        .HasColumnType("int");

                    b.Property<int?>("Dose")
                        .HasColumnType("int");

                    b.Property<int?>("EndRecommendedAge")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManufacturerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("StartRecommendedAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.VaccineInventory", b =>
                {
                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VaccineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ImportedDate")
                        .HasColumnType("date");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("BatchNumber", "FacilityId", "VaccineId");

                    b.HasIndex("BatchNumber")
                        .IsUnique();

                    b.HasIndex("FacilityId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineInventory");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Child", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Account", "Account")
                        .WithMany("Children")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Image", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Blog", "Blog")
                        .WithMany("Images")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccine", "Vaccine")
                        .WithMany("Images")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Blog");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Manufacturer", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Country", "Country")
                        .WithMany("Manufacturers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.PackageItem", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Package", "Package")
                        .WithMany("PackageItems")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccine", "Vaccine")
                        .WithMany("PackageItems")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccination", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Child", "Child")
                        .WithMany("Vaccinations")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Account", "Doctor")
                        .WithMany("DoctorVaccinations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Account", "Vaccinator")
                        .WithMany("VaccinatorVaccinations")
                        .HasForeignKey("VaccinatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Child");

                    b.Navigation("Doctor");

                    b.Navigation("Vaccinator");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.VaccinationDetail", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Package", "Package")
                        .WithMany("VaccinationDetails")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccination", "Vaccination")
                        .WithMany("VaccinationDetails")
                        .HasForeignKey("VaccinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccinationDetails")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Vaccination");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccine", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Category", "Category")
                        .WithMany("Vaccines")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Vaccines")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.VaccineInventory", b =>
                {
                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Facility", "Facility")
                        .WithMany("VaccineInventories")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineInventories")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Account", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DoctorVaccinations");

                    b.Navigation("VaccinatorVaccinations");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Blog", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Category", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Child", b =>
                {
                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Country", b =>
                {
                    b.Navigation("Manufacturers");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Facility", b =>
                {
                    b.Navigation("VaccineInventories");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Manufacturer", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Package", b =>
                {
                    b.Navigation("PackageItems");

                    b.Navigation("VaccinationDetails");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccination", b =>
                {
                    b.Navigation("VaccinationDetails");
                });

            modelBuilder.Entity("ChildrenVaccinationSystem.Contract.Repositories.Entities.Vaccine", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PackageItems");

                    b.Navigation("VaccinationDetails");

                    b.Navigation("VaccineInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
